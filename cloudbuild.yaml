steps:
  # Step 1: Clone the GitHub repository
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', 'https://github.com/th3-v3ng34nc3/AccuKnox-IaC-Scan-GCP.git', '/workspace/AccuKnox_Iac']

  # Step 2: Install Checkov and run the scan, saving the report in JSON format
  - name: 'python:3.8'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install checkov && \
        checkov -d /workspace/AccuKnox_Iac --output json > checkov_report.json || true

# Step 3: Access the secret using gcloud and save it to a file
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=accuknox_token --format='get(payload.data)' | tr '_-' '/+' | base64 -d > /workspace/decrypted-data.txt
        # Debugging: Check the contents of decrypted-data.txt
  - name: Formating the results
    run: |
    # Define variables for repo link and branch
      repoLink="${{ github.server_url }}/${{ github.repository }}"
      branch="${{ github.ref == 'refs/heads/main' && 'main' || github.head_ref }}"

    # Construct the JSON fragment to append
      new_fragment='{"details": {"repo": "'"$repoLink"'", "branch": "'"$branch"'"}}'

    # Read the existing JSON file into a variable
      existing_json=$(cat results/results_json.json)

    # Check if the existing JSON is empty or not
      if [ -z "$existing_json" ]; then
        # If empty, initialize as an empty array
          updated_json='['"$new_fragment"']'
      else
        # If not empty, append the new fragment to the existing JSON array
          updated_json=$(echo "$existing_json" | jq '. += ['"$new_fragment"']')
      fi

    # Write the updated JSON back to the file
      echo "$updated_json" > results/results_json.json
    shell: bash


# Step 4: Push report to CSPM panel
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        curl --location --request POST "https://${_CSPM_URL}/api/v1/artifact/?tenant_id=${_TENANT_ID}&data_type=IAC&save_to_s3=false" \
        --header "Tenant-Id: ${_TENANT_ID}" \
        --header "Authorization: Bearer $(cat /workspace/decrypted-data.txt)" \
        --form "file=@/workspace/checkov_report.json"


# Artifacts to store the Checkov report
artifacts:
  objects:
    location: 'gs://aditya-cicd-test/checkov-reports/'
    paths:
      - 'checkov_report.json'

# Define substitutions
substitutions:
  _IMAGE_URL: 'gcr.io/shaped-infusion-402417/python-app'
  _IMAGE_TAG: 'latest'
  _CSPM_URL: 'cspm.demo.accuknox.com'
  _TENANT_ID: '167'
  _BUCKET_NAME: 'gs://aditya-cicd-test'

logsBucket: 'gs://aditya-cicd-test'
timeout: '1200s' # 20 minutes
